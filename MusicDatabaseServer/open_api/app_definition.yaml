openapi: 3.0.1
info:
  title: Music Database Server
  version: 1.0.1
servers:
- url: /
  description: "Music Database Server"
#security:
#- oauth2: []
tags:
- name: public
  description: Operations available to regular developers
paths:
  /:
    get:
      tags:
      - public
      summary: Rootpath get for supporting health check on GKE
      operationId: api.generic.get
      responses:
        200:
          description: OK
          content: {}

  /music/album:
    get:
      tags:
        - public
      summary: Fetch an album from the music database
      operationId: api.albums.get_album
      parameters:
        - name: album_title
          in: query
          description: Title of album to get.
          required: true
          schema:
            type: string
        - name: band
          in: query
          description: Name of the band to get.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Fetch album(s) from the music database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/album'
    put:
      tags:
        - public
      summary: Updates an album.
      operationId: api.albums.update_album
      requestBody:
        description: The album to update.
        content:
          application/json:
            schema:
              x-body-name: album
              $ref: '#/components/schemas/album'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/album'
      x-codegen-request-body-name: album
    post:
      tags:
        - public
      summary: Creates a new album.
      operationId: api.albums.create_album
      requestBody:
        description: The album to create.
        content:
          application/json:
            schema:
              x-body-name: album
              $ref: '#/components/schemas/album'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/album'
      x-codegen-request-body-name: album
    delete:
      tags:
        - public
      summary: Deletes an album.
      operationId: api.albums.delete_album
      parameters:
        - name: album_title
          in: query
          description: The album id to delete.
          required: true
          schema:
            type: string
        - name: band
          in: query
          description: The band of the album to delete.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content: {}

  /music/album/{id}:
    get:
      tags:
        - public
      summary: Fetch an album from the music database
      operationId: api.albums.get_album_by_id
      parameters:
        - name: id
          in: path
          description: Album ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Fetch an album by id from the music database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/album'
    delete:
      tags:
        - public
      summary: Deletes an album.
      operationId: api.albums.delete_album_by_id
      parameters:
        - name: id
          in: path
          description: The album id to delete.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content: {}



  /music/random_albums:
    get:
      tags:
      - public
      summary: Fetch albums from the music database
      operationId: api.albums.get_random_albums
      parameters:
      - name: quantity
        in: query
        description: Number of random albums to get.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Fetch random album(s) from the music database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/album'

  /music/fav_songs:
    get:
      tags:
      - public
      summary: Fetch random songs from the songs database
      operationId: api.songs.get_random_songs
      parameters:
      - name: quantity
        in: query
        description: Number of songs to get. If not indicated it will return
          all songs (if there is at least one song matching the score criteria).
        schema:
          type: integer
      - name: score
        in: query
        description: Minimum score of the favorite songs to get. If not indicated
          it will return all songs.
        schema:
          type: number
      responses:
        200:
          description: Fetch random songs from the songs database
          content:
            application/json:
              schema:
                type: object
                properties:
                  songs:
                    type: array
                    items:
                      $ref: '#/components/schemas/song'
  /music/song:
    put:
      tags:
      - public
      summary: Updates a song.
      operationId: api.songs.update_song
      requestBody:
        description: The song to update.
        content:
          application/json:
            schema:
              x-body-name: song
              $ref: '#/components/schemas/song'
        required: true
      responses:
        200:
          description: OK
          content: {}
      x-codegen-request-body-name: song
    post:
      tags:
      - public
      summary: Creates a new song.
      operationId: api.songs.create_song
      requestBody:
        description: The song to create.
        content:
          application/json:
            schema:
              x-body-name: song
              $ref: '#/components/schemas/song'
        required: true
      responses:
        200:
          description: OK
          content: {}
      x-codegen-request-body-name: song
    delete:
      tags:
      - public
      summary: Deletes a song.
      operationId: api.songs.delete_song
      parameters:
      - name: file_name
        in: query
        description: The file name of the song to delete.
        required: true
        schema:
          type: string
      - name: album_title
        in: query
        description: The album of the song.
        required: true
        schema:
          type: string
      - name: band
        in: query
        description: The band of the song.
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
  /music/song/{id}:
    delete:
      tags:
      - public
      summary: Deletes a song.
      operationId: api.songs.delete_song_by_id
      parameters:
      - name: id
        in: path
        description: The id of the song to delete.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
components:
  schemas:
    album:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - type: integer
        band:
          type: string
        title:
          type: string
        style:
          type: string
        year:
          oneOf:
            - type: string
            - type: integer
        country:
          type: string
        type:
          type: string
        score:
          oneOf:
            - type: string
            - type: number
        review:
          type: string
        copy:
          type: string
    song:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - type: integer
        title:
          type: string
        file_name:
          type: string
        track_number:
          oneOf:
            - type: string
            - type: integer
        score:
          oneOf:
            - type: string
            - type: number
        type:
          type: string
        album:
          $ref: '#/components/schemas/album'
#  securitySchemes:
#    oauth2:
#      type: oauth2
#      flows:
#        implicit:
#          authorizationUrl: https://example.com/oauth2/dialog
#          scopes:
#            uid: Unique identifier of the user accessing the service.
#      x-tokenInfoFunc: app.token_info