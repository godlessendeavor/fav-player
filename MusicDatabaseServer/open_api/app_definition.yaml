swagger: "2.0"

info:
  title: "Music Database Server"
  version: "1.0"
#  license:
#    name: Apache 2.0
#    url: http://www.apache.org/licenses/LICENSE-2.0.html


schemes:
 - http
paths:
  /songs/fav_song: #make sure to not leave trailing slashes in the path or Flask will redirect the response to the URL with trailing slash 
      get:
        summary: 'Fetch random song from the favorites database'
        parameters:
        - in: query
          name: quantity
          type: integer
          required: false
          description: Number of favorite songs to get. If not indicated it will return 1 song (if there is at least one song matching the score criteria).
        - in: query
          name: score
          type: integer
          required: false
          description: Minimum score of the favorite songs to get. If not indicated minimum is 0.
        tags:
        - public
        operationId: api.songs.get_songs
        responses:
          '200':
              description: Fetch (a) random song(s) from the favorites database
              schema:
                 type: array
                 items:
                 $ref: '#/definitions/song'   
      post:
         summary: Creates a new favorite song.
         consumes:
           - application/json
         parameters:
           - in: body
             name: song
             description: The song to create.
             required: true
             schema:
               $ref: '#/definitions/song'
         tags:
           - public
         operationId: api.songs.create_song
         responses:
           '200':
              description: OK           
                 
      put:
         summary: Updates a favorite song.
         consumes:
           - application/json
         parameters:
           - in: body
             name: song
             description: The song to update.
             required: true
             schema:
               $ref: '#/definitions/song'
         tags:
           - public
         operationId: api.songs.update_song
         responses:
           '200':
              description: OK    
              
      delete:
         summary: Deletes a favorite song.
         consumes:
           - application/json
         parameters:
           - in: query
             name: song_id
             type: integer             
             required: true
             description: The song id to delete.
         tags:
           - public
         operationId: api.songs.delete_song
         responses:
           '200':
              description: OK 
              
          

                
                
tags:
- name: public
  description: Operations available to regular developers
#- name: admins
#  description: Secured Admin-only calls

definitions:
  song:
    type: object
    properties:
      _id:          { type: string }
      title:        { type: string }
      album:        { type: string }
      band:         { type: string }
      total_length: { type: string }
      abs_path:     { type: string }
      track_number: { type: string }
      score:        { type: string }
    required:
      - title
      - album
      - band
      - total_length
      - abs_path
      - track_number
      - score
        