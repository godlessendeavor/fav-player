openapi: 3.0.1
info:
  title: Music Database Server
  version: 1.0.1
servers:
- url: /
security:
- oauth2: []
tags:
- name: public
  description: Operations available to regular developers
paths:
  /:
    get:
      tags:
      - public
      summary: Rootpath get for supporting health check on GKE
      operationId: api.generic.get
      responses:
        200:
          description: OK
          content: {}
  /music/albums:
    get:
      tags:
      - public
      summary: Fetch albums from the music database
      operationId: api.albums.get_albums
      parameters:
      - name: quantity
        in: query
        description: Number of random albums to get. If not indicated it will return
          all albums.
        schema:
          type: integer
      - name: album_id
        in: query
        description: Id of album to get. If this parameter is set the parameter quantity
          will not be checked.
        schema:
          type: integer
      responses:
        200:
          description: Fetch album(s) from the music database
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/album'
    put:
      tags:
      - public
      summary: Updates an album.
      operationId: api.albums.update_album
      requestBody:
        description: The album to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/album'
        required: true
      responses:
        200:
          description: OK
          content: {}
      x-codegen-request-body-name: album
    post:
      tags:
      - public
      summary: Creates a new album.
      operationId: api.albums.create_album
      requestBody:
        description: The album to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/album'
        required: true
      responses:
        200:
          description: OK
          content: {}
      x-codegen-request-body-name: album
    delete:
      tags:
      - public
      summary: Deletes an album.
      operationId: api.albums.delete_album
      parameters:
      - name: album_id
        in: query
        description: The album id to delete.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content: {}
  /music/fav_songs:
    get:
      tags:
      - public
      summary: Fetch random songs from the favorites database
      operationId: api.songs.get_songs
      parameters:
      - name: quantity
        in: query
        description: Number of favorite songs to get. If not indicated it will return
          all songs (if there is at least one song matching the score criteria).
        schema:
          type: integer
      - name: score
        in: query
        description: Minimum score of the favorite songs to get. If not indicated
          it will return all songs.
        schema:
          type: number
      responses:
        200:
          description: Fetch random songs from the favorites database
          content:
            '*/*':
              schema:
                type: object
                properties:
                  songs:
                    type: array
                    items:
                      $ref: '#/components/schemas/song'
    put:
      tags:
      - public
      summary: Updates a favorite song.
      operationId: api.songs.update_song
      requestBody:
        description: The song to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/song'
        required: true
      responses:
        200:
          description: OK
          content: {}
      x-codegen-request-body-name: song
    post:
      tags:
      - public
      summary: Creates a new favorite song.
      operationId: api.songs.create_song
      requestBody:
        description: The song to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/song'
        required: true
      responses:
        200:
          description: OK
          content: {}
      x-codegen-request-body-name: song
    delete:
      tags:
      - public
      summary: Deletes a favorite song.
      operationId: api.songs.delete_song
      parameters:
      - name: song_id
        in: query
        description: The song id to delete.
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content: {}
components:
  schemas:
    album:
      type: object
      properties:
        id:
          type: string
        band:
          type: string
        title:
          type: string
        style:
          type: string
        year:
          type: string
        country:
          type: string
        type:
          type: string
        score:
          type: string
        review:
          type: string
        copy:
          type: string
    song:
      type: object
      properties:
        id:
          type: string
        disc_id:
          type: string
        title:
          type: string
        file_name:
          type: string
        track_number:
          type: string
        score:
          type: string
        type:
          type: string
        album:
          $ref: '#/components/schemas/album'
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.com/oauth2/dialog
          scopes:
            uid: Unique identifier of the user accessing the service.
      x-tokenInfoFunc: app.token_info